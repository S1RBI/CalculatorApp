package com.example.calculatorapp.models

import android.content.Context
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.google.gson.annotations.SerializedName
import kotlinx.coroutines.*
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.logging.HttpLoggingInterceptor
import java.io.IOException
import java.io.File
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.locks.ReentrantReadWriteLock
import com.example.calculatorapp.utils.Logger

/**
 * HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase API (–∞–Ω–∞–ª–æ–≥ C# SupabaseHttpClient)
 */
object SupabaseClient {
    // –ë–ï–ó–û–ü–ê–°–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–∑ BuildConfig
    private val SUPABASE_URL = com.example.calculatorapp.BuildConfig.SUPABASE_URL
    private val SUPABASE_ANON_KEY = com.example.calculatorapp.BuildConfig.SUPABASE_ANON_KEY

    private var authToken: String = ""

    private val client = OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().apply {
            level = if (com.example.calculatorapp.BuildConfig.DEBUG)
                HttpLoggingInterceptor.Level.BODY
            else
                HttpLoggingInterceptor.Level.NONE
        })
        .cache(okhttp3.Cache(
            directory = java.io.File(System.getProperty("java.io.tmpdir"), "http_cache"),
            maxSize = 10L * 1024L * 1024L // 10 MB
        ))
        .addInterceptor { chain ->
            val original = chain.request()
            val requestBuilder = original.newBuilder()
                .header("apikey", SUPABASE_ANON_KEY)
                .header("Prefer", "return=representation")

            if (authToken.isNotEmpty()) {
                requestBuilder.header("Authorization", "Bearer $authToken")
            }

            chain.proceed(requestBuilder.build())
        }
        .build()

    fun setAuthToken(token: String) {
        authToken = token
    }

    suspend fun getAsync(endpoint: String): String = withContext(Dispatchers.IO) {
        val request = Request.Builder()
            .url("$SUPABASE_URL/rest/v1/$endpoint")
            .get()
            .build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "Unknown error"
                throw IOException("HTTP ${response.code} ${response.message}: $errorBody")
            }
            response.body?.string() ?: ""
        }
    }

    suspend fun postAsync(endpoint: String, json: String): String = withContext(Dispatchers.IO) {
        val body = json.toRequestBody("application/json".toMediaType())
        val request = Request.Builder()
            .url("$SUPABASE_URL/rest/v1/$endpoint")
            .post(body)
            .build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "Unknown error"
                throw IOException("HTTP ${response.code} ${response.message}: $errorBody")
            }
            response.body?.string() ?: ""
        }
    }

    suspend fun putAsync(endpoint: String, json: String): String = withContext(Dispatchers.IO) {
        val body = json.toRequestBody("application/json".toMediaType())
        val request = Request.Builder()
            .url("$SUPABASE_URL/rest/v1/$endpoint")
            .put(body)
            .build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "Unknown error"
                throw IOException("HTTP ${response.code} ${response.message}: $errorBody")
            }
            response.body?.string() ?: ""
        }
    }

    suspend fun authSignInAsync(email: String, password: String): String = withContext(Dispatchers.IO) {
        val authData = mapOf("email" to email, "password" to password)
        val json = Gson().toJson(authData)
        val body = json.toRequestBody("application/json".toMediaType())

        val authClient = OkHttpClient.Builder()
            .addInterceptor { chain ->
                val original = chain.request()
                val requestBuilder = original.newBuilder()
                    .header("apikey", SUPABASE_ANON_KEY)
                chain.proceed(requestBuilder.build())
            }
            .build()

        val request = Request.Builder()
            .url("$SUPABASE_URL/auth/v1/token?grant_type=password")
            .post(body)
            .build()

        authClient.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "Unknown error"
                throw IOException("HTTP ${response.code} ${response.message}: $errorBody")
            }
            response.body?.string() ?: ""
        }
    }

    suspend fun updatePasswordAsync(newPassword: String): String = withContext(Dispatchers.IO) {
        val updateData = mapOf("password" to newPassword)
        val json = Gson().toJson(updateData)
        val body = json.toRequestBody("application/json".toMediaType())

        val request = Request.Builder()
            .url("$SUPABASE_URL/auth/v1/user")
            .put(body)
            .build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "Unknown error"
                throw IOException("HTTP ${response.code} ${response.message}: $errorBody")
            }
            response.body?.string() ?: ""
        }
    }
}

/**
 * –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase (–∞–Ω–∞–ª–æ–≥ C# –º–æ–¥–µ–ª–µ–π)
 */
data class AppData(
    val id: String? = null,
    @SerializedName("data_type") val dataType: String,
    @SerializedName("data_content") val dataContent: Map<String, Any>,
    val version: Int,
    @SerializedName("created_at") val createdAt: String? = null,
    @SerializedName("updated_at") val updatedAt: String? = null,
    @SerializedName("created_by") val createdBy: String? = null
)

data class UserProfile(
    val id: String,
    val username: String? = null,
    val role: String? = null,
    @SerializedName("is_admin") val isAdmin: Boolean = false,
    @SerializedName("created_at") val createdAt: String? = null,
    @SerializedName("updated_at") val updatedAt: String? = null
)

data class AuthResponse(
    @SerializedName("access_token") val accessToken: String,
    @SerializedName("refresh_token") val refreshToken: String,
    val user: AuthUser
)

data class AuthUser(
    val id: String,
    val email: String
)

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase (–∞–Ω–∞–ª–æ–≥ C# SupabaseAuthManager)
 */
object SupabaseAuthManager {
    private var currentUser: AuthUser? = null
    private val gson = Gson()

    suspend fun signInAsync(email: String, password: String): Boolean = withContext(Dispatchers.IO) {
        try {
            val response = SupabaseClient.authSignInAsync(email, password)
            val authResponse = gson.fromJson(response, AuthResponse::class.java)

            if (authResponse.accessToken.isNotEmpty()) {
                currentUser = authResponse.user
                SupabaseClient.setAuthToken(authResponse.accessToken)
                SupabasePriceManager.currentUserId = authResponse.user.id
                true
            } else {
                false
            }
        } catch (e: Exception) {
            Logger.e("SupabaseAuth", "Sign in error: ${e.message}")
            throw Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
        }
    }

    fun signOutAsync() {
        currentUser = null
        SupabaseClient.setAuthToken("")
        SupabasePriceManager.currentUserId = ""
    }

    fun isSignedIn(): Boolean = currentUser != null

    suspend fun updatePasswordAsync(newPassword: String): Boolean = withContext(Dispatchers.IO) {
        try {
            if (currentUser == null) return@withContext false

            val response = SupabaseClient.updatePasswordAsync(newPassword)
            response.isNotEmpty()
        } catch (e: Exception) {
            Logger.e("SupabaseAuth", "Update password error: ${e.message}")
            throw Exception("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: ${e.message}")
        }
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ Supabase (–∞–Ω–∞–ª–æ–≥ C# SupabasePriceManager)
 */
object SupabasePriceManager {
    private var localPrices: Map<String, Map<String, Double>>? = null
    private var currentVersion = 1
    var currentUserId = ""
    private val gson = Gson()

    suspend fun initializeAsync(): Boolean = withContext(Dispatchers.IO) {
        try {
            Logger.d("SupabasePriceManager", "üîÑ Starting SupabasePriceManager initialization...")

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
            try {
                val testResponse = SupabaseClient.getAsync("app_data?limit=1")
                Logger.d("SupabasePriceManager", "‚úÖ Connection test successful: ${testResponse.take(50)}")
            } catch (e: Exception) {
                Logger.e("SupabasePriceManager", "‚ùå Connection test failed: ${e.message}")
                throw Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${e.message}")
            }

            // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            val success = loadPricesFromSupabase()

            if (success) {
                android.util.Log.d("SupabasePriceManager", "‚úÖ Successfully loaded prices from Supabase: version $currentVersion")
                android.util.Log.d("SupabasePriceManager", "üìä Loaded data summary:")
                localPrices?.forEach { (type, prices) ->
                    android.util.Log.d("SupabasePriceManager", "   üè∑Ô∏è $type: ${prices.size} prices")
                }
            } else {
                android.util.Log.w("SupabasePriceManager", "‚ö†Ô∏è No prices found in Supabase, but connection works")
            }

            return@withContext success
        } catch (e: Exception) {
            android.util.Log.e("SupabasePriceManager", "‚ùå Initialize error: ${e.message}")
            android.util.Log.e("SupabasePriceManager", "Exception details:", e)
            throw Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±–ª–∞–∫—É: ${e.message}")
        }
    }

    private suspend fun loadPricesFromSupabase(): Boolean = withContext(Dispatchers.IO) {
        try {
            // –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            val response = SupabaseClient.getAsync("app_data?data_type=eq.prices&order=version.desc&limit=1")

            if (response.isEmpty() || response == "[]") {
                android.util.Log.w("SupabasePriceManager", "No price data found in Supabase")
                return@withContext false
            }

            android.util.Log.d("SupabasePriceManager", "Raw response: $response")

            val type = object : TypeToken<List<AppData>>() {}.type
            val appDataList: List<AppData> = gson.fromJson(response, type)

            if (appDataList.isNotEmpty()) {
                val appData = appDataList[0]
                currentVersion = appData.version

                android.util.Log.d("SupabasePriceManager", "Found price data: version $currentVersion")

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                val jsonString = gson.toJson(appData.dataContent)
                android.util.Log.d("SupabasePriceManager", "Data content JSON: $jsonString")

                val pricesType = object : TypeToken<Map<String, Map<String, Double>>>() {}.type
                val parsedPrices = gson.fromJson<Map<String, Map<String, Double>>>(jsonString, pricesType)

                if (parsedPrices != null && parsedPrices.isNotEmpty()) {
                    localPrices = parsedPrices
                    android.util.Log.d("SupabasePriceManager", "Successfully loaded prices: ${parsedPrices.keys}")
                    parsedPrices.forEach { (type, prices) ->
                        android.util.Log.d("SupabasePriceManager", "$type: ${prices.keys}")
                    }
                    return@withContext true
                } else {
                    android.util.Log.w("SupabasePriceManager", "Parsed prices are null or empty")
                    return@withContext false
                }
            } else {
                android.util.Log.w("SupabasePriceManager", "AppData list is empty")
                return@withContext false
            }
        } catch (e: Exception) {
            android.util.Log.e("SupabasePriceManager", "Load prices error: ${e.message}")
            throw Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞: ${e.message}")
        }
    }

    suspend fun savePricesToSupabase(prices: Map<String, Map<String, Double>>): Boolean = withContext(Dispatchers.IO) {
        try {
            android.util.Log.d("SupabasePriceManager", "Starting save to Supabase...")
            android.util.Log.d("SupabasePriceManager", "Current user ID: $currentUserId")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            val isAdmin = isCurrentUserAdmin()
            android.util.Log.d("SupabasePriceManager", "Is admin: $isAdmin")

            if (!isAdmin) {
                throw Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            }

            val newVersion = currentVersion + 1
            android.util.Log.d("SupabasePriceManager", "New version will be: $newVersion")

            val appDataForSave = AppData(
                dataType = "prices",
                dataContent = prices,
                version = newVersion,
                createdBy = if (currentUserId.isEmpty()) null else currentUserId
            )

            val json = gson.toJson(appDataForSave)
            android.util.Log.d("SupabasePriceManager", "JSON to save: ${json.take(200)}...")

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            try {
                android.util.Log.d("SupabasePriceManager", "Attempting UPDATE...")
                val updateResponse = SupabaseClient.putAsync("app_data?data_type=eq.prices", json)
                android.util.Log.d("SupabasePriceManager", "Update response: ${updateResponse.take(100)}")

                if (updateResponse.isNotEmpty() && updateResponse != "[]") {
                    currentVersion = newVersion
                    localPrices = prices
                    android.util.Log.d("SupabasePriceManager", "‚úÖ Updated prices to version $newVersion")
                    return@withContext true
                }
            } catch (e: Exception) {
                android.util.Log.w("SupabasePriceManager", "Update failed, trying INSERT: ${e.message}")
            }

            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            try {
                android.util.Log.d("SupabasePriceManager", "Attempting INSERT...")
                val response = SupabaseClient.postAsync("app_data", json)
                android.util.Log.d("SupabasePriceManager", "Insert response: ${response.take(100)}")

                if (response.isNotEmpty() && response != "[]") {
                    currentVersion = newVersion
                    localPrices = prices
                    android.util.Log.d("SupabasePriceManager", "‚úÖ Created new prices version $newVersion")
                    return@withContext true
                }
            } catch (e: Exception) {
                android.util.Log.e("SupabasePriceManager", "Insert also failed: ${e.message}")
                throw e
            }

            android.util.Log.e("SupabasePriceManager", "‚ùå Both update and insert failed")
            return@withContext false
        } catch (e: Exception) {
            android.util.Log.e("SupabasePriceManager", "Save prices error: ${e.message}")
            throw Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω –≤ –æ–±–ª–∞–∫–æ: ${e.message}")
        }
    }

    suspend fun isCurrentUserAdmin(): Boolean = withContext(Dispatchers.IO) {
        try {
            if (currentUserId.isEmpty()) {
                android.util.Log.w("SupabasePriceManager", "Current user ID is empty")
                return@withContext false
            }

            android.util.Log.d("SupabasePriceManager", "Checking admin rights for user: $currentUserId")

            val response = SupabaseClient.getAsync("user_profiles?id=eq.$currentUserId&select=is_admin")
            android.util.Log.d("SupabasePriceManager", "Admin check response: $response")

            if (response.isEmpty() || response == "[]") {
                android.util.Log.w("SupabasePriceManager", "No user profile found for user: $currentUserId")
                return@withContext false
            }

            val type = object : TypeToken<List<UserProfile>>() {}.type
            val profiles: List<UserProfile> = gson.fromJson(response, type)

            val isAdmin = profiles.isNotEmpty() && profiles[0].isAdmin
            android.util.Log.d("SupabasePriceManager", "User is admin: $isAdmin")

            return@withContext isAdmin
        } catch (e: Exception) {
            android.util.Log.e("SupabasePriceManager", "Check admin error: ${e.message}")
            return@withContext false
        }
    }

    fun getLocalPrices(): Map<String, Map<String, Double>> {
        val prices = localPrices ?: emptyMap()
        android.util.Log.d("SupabasePriceManager", "Returning local prices: ${prices.size} types, version $currentVersion")
        return prices
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
     */
    suspend fun getFreshPricesFromSupabase(): Map<String, Map<String, Double>> = withContext(Dispatchers.IO) {
        try {
            val success = loadPricesFromSupabase()
            if (success) {
                android.util.Log.d("SupabasePriceManager", "Fresh prices loaded successfully")
                return@withContext localPrices ?: emptyMap()
            } else {
                android.util.Log.w("SupabasePriceManager", "Failed to load fresh prices")
                return@withContext localPrices ?: emptyMap()
            }
        } catch (e: Exception) {
            android.util.Log.e("SupabasePriceManager", "Error getting fresh prices: ${e.message}")
            return@withContext localPrices ?: emptyMap()
        }
    }

    fun getCurrentVersion(): Int = currentVersion
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π PriceManager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ª—å–∫–æ Supabase (–±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
 * –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
 */
class PriceManager private constructor(context: Context) {

    companion object {
        @Volatile
        private var INSTANCE: PriceManager? = null

        fun getInstance(context: Context): PriceManager {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: PriceManager(context.applicationContext).also {
                    Logger.d("PriceManager", "üèóÔ∏è Creating NEW PriceManager singleton instance")
                    INSTANCE = it
                }
            }
        }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º applicationContext –∏ –ø–æ–ª—É—á–∞–µ–º filesDir —Å—Ä–∞–∑—É
    private val appContext = context.applicationContext

    private val gson = Gson()
    private var isOnlineMode = false

    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    private val localPricesFile = File(appContext.filesDir, "local_prices.json")

    // Thread-safe –∫–µ—à –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ Supabase/—Ñ–∞–π–ª–∞
    private val localPricesCache = ConcurrentHashMap<String, Map<String, Double>>()
    private val cacheLock = ReentrantReadWriteLock()

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
     */
    fun initializeLocalMode() {
        isOnlineMode = false

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!loadLocalPricesFromFile()) {
            localPricesCache.clear()
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase
     */
    suspend fun initializeWithCloudAsync(): Boolean = withContext(Dispatchers.IO) {
        try {
            android.util.Log.d("PriceManager", "üöÄ Starting Supabase initialization...")

            // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase
            val success = SupabasePriceManager.initializeAsync()
            android.util.Log.d("PriceManager", "üì° SupabasePriceManager.initializeAsync() returned: $success")

            if (success) {
                android.util.Log.d("PriceManager", "‚úÖ Supabase initialized successfully")

                // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –î–û –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                isOnlineMode = true
                android.util.Log.d("PriceManager", "üîÑ Set online mode to TRUE")

                // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
                val updateSuccess = updateLocalDataFromSupabase()

                if (updateSuccess) {
                    android.util.Log.d("PriceManager", "‚úÖ Local data updated from Supabase successfully")
                } else {
                    android.util.Log.w("PriceManager", "‚ö†Ô∏è Failed to update local data, but Supabase is connected")
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
                val cacheSize = localPricesCache.size
                android.util.Log.d("PriceManager", "üìä Final state - Online mode: $isOnlineMode, Cache size: $cacheSize")

                return@withContext true
            } else {
                android.util.Log.w("PriceManager", "‚ùå Supabase initialization returned false")
                isOnlineMode = false
                return@withContext false
            }
        } catch (e: Exception) {
            android.util.Log.e("PriceManager", "‚ùå Failed to initialize with Supabase: ${e.message}")
            android.util.Log.e("PriceManager", "Exception stack trace:", e)
            isOnlineMode = false
            throw e
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
     */
    private fun loadLocalPricesFromFile(): Boolean {
        return try {
            if (!localPricesFile.exists()) {
                return false
            }

            val jsonString = localPricesFile.readText()
            val type = object : TypeToken<Map<String, Map<String, Double>>>() {}.type
            val loadedPrices: Map<String, Map<String, Double>> = gson.fromJson(jsonString, type)

            localPricesCache.clear()
            loadedPrices.forEach { (type, thicknessMap) ->
                val mutableThicknessMap = thicknessMap.toMutableMap()
                localPricesCache[type] = mutableThicknessMap
            }

            true
        } catch (e: Exception) {
            false
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ —Ñ–∞–π–ª
     */
    private fun saveLocalPricesToFile() {
        try {
            val jsonString = gson.toJson(localPricesCache)
            localPricesFile.writeText(jsonString)
        } catch (e: Exception) {
            // –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }
    }



    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
     */
    private suspend fun updateLocalDataFromSupabase(): Boolean = withContext(Dispatchers.IO) {
        try {
            android.util.Log.d("PriceManager", "üîÑ Updating local data from Supabase...")

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
            val supabasePrices = SupabasePriceManager.getFreshPricesFromSupabase()

            if (supabasePrices.isNotEmpty()) {
                android.util.Log.d("PriceManager", "‚úÖ Got fresh data from Supabase: ${supabasePrices.size} types")

                // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                localPricesCache.clear()

                supabasePrices.forEach { (type, thicknessMap) ->
                    val mutableThicknessMap = thicknessMap.toMutableMap()
                    localPricesCache[type] = mutableThicknessMap

                    android.util.Log.d("PriceManager", "  üìã Updated $type: ${thicknessMap.size} prices")
                    thicknessMap.forEach { (thickness, price) ->
                        android.util.Log.d("PriceManager", "    üí∞ ${thickness}–º–º = ${price}‚ÇΩ")
                    }
                }

                android.util.Log.d("PriceManager", "‚úÖ Local cache updated with ${localPricesCache.size} types")

                // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                saveLocalPricesToFile()

                return@withContext true
            } else {
                android.util.Log.w("PriceManager", "‚ö†Ô∏è No data received from Supabase")
                return@withContext false
            }
        } catch (e: Exception) {
            android.util.Log.e("PriceManager", "‚ùå Error updating local data: ${e.message}")
            return@withContext false
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
     */
    private fun refreshFromSupabase() {
        android.util.Log.d("PriceManager", "üîÑ Starting refresh from Supabase...")
        android.util.Log.d("PriceManager", "üìä Online mode status: $isOnlineMode")

        if (!isOnlineMode) {
            android.util.Log.w("PriceManager", "‚ö†Ô∏è Not in online mode, skipping Supabase refresh")
            return
        }

        val supabasePrices = SupabasePriceManager.getLocalPrices()
        android.util.Log.d("PriceManager", "üìä Supabase returned ${supabasePrices.size} types")

        if (supabasePrices.isNotEmpty()) {
            android.util.Log.d("PriceManager", "‚úÖ Updating local cache with Supabase data:")

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            supabasePrices.forEach { (type, thicknessMap) ->
                android.util.Log.d("PriceManager", "  üìã $type: ${thicknessMap.size} prices")
                thicknessMap.forEach { (thickness, price) ->
                    android.util.Log.d("PriceManager", "    üí∞ ${thickness}–º–º = ${price}‚ÇΩ")
                }
            }

            // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase
            updateLocalPricesFromSupabase(supabasePrices)

            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
            android.util.Log.d("PriceManager", "üîç Cache validation after update:")
            android.util.Log.d("PriceManager", "   Cache size: ${localPricesCache.size}")
            android.util.Log.d("PriceManager", "   Cache keys: ${localPricesCache.keys}")

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –∫–µ—à–∞
            val testPrice = localPricesCache["–û–±—ã—á–Ω–æ–µ —Ü–≤–µ—Ç –∫—Ä–∞—Å–Ω—ã–π/–∑–µ–ª–µ–Ω—ã–π"]?.get("10")
            android.util.Log.d("PriceManager", "   Test cache price: –ö—Ä–∞—Å–Ω—ã–π/–∑–µ–ª–µ–Ω—ã–π 10–º–º = ${testPrice}‚ÇΩ")

            android.util.Log.d("PriceManager", "‚úÖ Local cache updated successfully")
        } else {
            android.util.Log.w("PriceManager", "‚ö†Ô∏è No prices loaded from Supabase, cache remains empty")

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            val version = SupabasePriceManager.getCurrentVersion()
            android.util.Log.w("PriceManager", "üìä Current Supabase version: $version")

            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            android.util.Log.d("PriceManager", "üîÑ Attempting to force load from Supabase...")
            // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º - –≤—ã–∑–æ–≤–µ–º –∏–∑ –∫–æ—Ä—É—Ç–∏–Ω—ã
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑–≤–Ω–µ)
     */
    fun forceRefreshFromSupabase() {
        refreshFromSupabase()
    }

    /**
     * Thread-safe –∑–∞–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase
     */
    @Synchronized
    private fun updateLocalPricesFromSupabase(supabasePrices: Map<String, Map<String, Double>>) {
        cacheLock.writeLock().lock()
        try {
            if (supabasePrices.isNotEmpty()) {
                Logger.d("PriceManager", "üîÑ Updating local prices cache (thread-safe)...")

                // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞
                val newCache = mutableMapOf<String, Map<String, Double>>()
                supabasePrices.forEach { (type, thicknessMap) ->
                    newCache[type] = thicknessMap.toMap() // –°–æ–∑–¥–∞–µ–º immutable –∫–æ–ø–∏—é
                }

                // –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –∫–µ—à –∞—Ç–æ–º–∞—Ä–Ω–æ
                localPricesCache.clear()
                localPricesCache.putAll(newCache)

                Logger.d("PriceManager", "‚úÖ Cache updated safely: ${localPricesCache.size} types")
            } else {
                Logger.w("PriceManager", "‚ö†Ô∏è Cannot update cache - Supabase prices are empty")
            }
        } finally {
            cacheLock.writeLock().unlock()
        }
    }



    /**
     * Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
     */
    fun getPrice(coverageType: CoverageType, thickness: String): Double {
        cacheLock.readLock().lock()
        try {
            if (!isOnlineMode) {
                // –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º –∏–∑ –∫–µ—à–∞
                return localPricesCache[coverageType.displayName]?.get(thickness) ?: 0.0
            }

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–∑ Supabase)
            val cachePrice = localPricesCache[coverageType.displayName]?.get(thickness)
            if (cachePrice != null) {
                return cachePrice
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
            val supabasePrices = SupabasePriceManager.getLocalPrices()
            if (supabasePrices.isNotEmpty()) {
                val supabasePrice = supabasePrices[coverageType.displayName]?.get(thickness)
                if (supabasePrice != null) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (—Ç—Ä–µ–±—É–µ—Ç write lock)
                    cacheLock.readLock().unlock()
                    cacheLock.writeLock().lock()
                    try {
                        if (!localPricesCache.containsKey(coverageType.displayName)) {
                            localPricesCache[coverageType.displayName] = mutableMapOf()
                        }
                        val mutableMap = localPricesCache[coverageType.displayName]?.toMutableMap() ?: mutableMapOf()
                        mutableMap[thickness] = supabasePrice
                        localPricesCache[coverageType.displayName] = mutableMap
                        return supabasePrice
                    } finally {
                        cacheLock.readLock().lock()
                        cacheLock.writeLock().unlock()
                    }
                }
            }

            return 0.0
        } finally {
            cacheLock.readLock().unlock()
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ –∏–ª–∏ Supabase)
     */
    fun getAllPrices(): List<PriceItem> {
        val prices = if (isOnlineMode) {
            // –í –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º –∏–∑ Supabase
            val supabasePrices = SupabasePriceManager.getLocalPrices()
            if (supabasePrices.isNotEmpty()) {
                supabasePrices
            } else {
                localPricesCache.toMap()
            }
        } else {
            // –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º –∏–∑ –∫–µ—à–∞
            localPricesCache.toMap()
        }

        return convertPricesToItems(prices)
    }

    private fun convertPricesToItems(prices: Map<String, Map<String, Double>>): List<PriceItem> {
        val result = mutableListOf<PriceItem>()

        prices.forEach { (type, thicknessMap) ->
            thicknessMap.forEach { (thickness, price) ->
                result.add(PriceItem(type, thickness, price))
            }
        }

        return result.sortedWith(compareBy({ it.type }, {
            if (it.thickness.contains("+")) {
                val parts = it.thickness.split("+")
                parts[0].toIntOrNull() ?: 0
            } else {
                it.thickness.toIntOrNull() ?: 0
            }
        }))
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—ã (–≤ Supabase –∏ –ª–æ–∫–∞–ª—å–Ω–æ)
     */
    suspend fun savePricesAsync(priceItems: List<PriceItem>): Boolean = withContext(Dispatchers.IO) {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º List<PriceItem> –≤ Map<String, Map<String, Double>>
            val prices = mutableMapOf<String, MutableMap<String, Double>>()

            priceItems.forEach { item ->
                if (!prices.containsKey(item.type)) {
                    prices[item.type] = mutableMapOf()
                }
                prices[item.type]!![item.thickness] = item.price
            }

            // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            localPricesCache.clear()
            prices.forEach { (type, thicknessMap) ->
                localPricesCache[type] = thicknessMap.toMutableMap()
            }
            saveLocalPricesToFile()
            android.util.Log.d("PriceManager", "‚úÖ Saved ${priceItems.size} items locally")

            // –ï—Å–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            if (isOnlineMode) {
                try {
                    val success = SupabasePriceManager.savePricesToSupabase(prices)
                    if (success) {
                        android.util.Log.d("PriceManager", "‚úÖ Successfully saved to Supabase")
                        return@withContext true
                    } else {
                        android.util.Log.w("PriceManager", "‚ö†Ô∏è Failed to save to Supabase, but saved locally")
                        return@withContext true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                    }
                } catch (e: Exception) {
                    android.util.Log.e("PriceManager", "‚ùå Supabase save error: ${e.message}")
                    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                    return@withContext true
                }
            } else {
                android.util.Log.d("PriceManager", "üì± Offline mode - saved locally only")
                return@withContext true
            }
        } catch (e: Exception) {
            android.util.Log.e("PriceManager", "‚ùå Save prices error: ${e.message}")
            throw e
        }
    }

    fun isOnlineMode(): Boolean = isOnlineMode

    fun getModeString(): String = if (isOnlineMode) "–û–±–ª–∞—á–Ω—ã–π —Ä–µ–∂–∏–º" else "–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"

}
