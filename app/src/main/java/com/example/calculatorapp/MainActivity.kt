package com.example.calculatorapp

import android.graphics.drawable.GradientDrawable
import android.os.Bundle
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import android.view.View
import com.example.calculatorapp.utils.ThemeHelper
import androidx.core.graphics.toColorInt
import com.example.calculatorapp.models.PriceManager
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withTimeoutOrNull
import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import com.example.calculatorapp.utils.Logger
import com.example.calculatorapp.utils.PerformanceMonitor

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∏—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase
 */
class MainActivity : FragmentActivity() {

    private lateinit var priceManager: PriceManager

    private lateinit var calculatorButton: Button
    private lateinit var adminButton: Button
    private lateinit var fragmentContainer: LinearLayout
    private lateinit var loadingScreen: LinearLayout

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        priceManager = PriceManager.getInstance(this)

        createUI()
        setupNavigation()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingScreen()

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        initializeAsync()
    }

    private fun initializeAsync() {
        lifecycleScope.launch {
            val initTimer = PerformanceMonitor.startTimer("App initialization")
            try {
                Logger.d("MainActivity", "üöÄ Starting app initialization...")

                // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
                if (!isNetworkAvailable()) {
                    Logger.w("MainActivity", "‚ùå No internet connection - switching to local mode")

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    priceManager.initializeLocalMode()

                    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    hideLoadingScreen()
                    showFragment(CalculatorFragment())
                    setActiveButton(calculatorButton)

                    Toast.makeText(
                        this@MainActivity,
                        "üì± –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                        Toast.LENGTH_LONG
                    ).show()
                    return@launch
                }

                // –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                val success = withTimeoutOrNull(3000) { // –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    priceManager.initializeWithCloudAsync()
                } ?: false

                Logger.d("MainActivity", "üìä Initialization result: $success")
                initTimer.finish()

                if (success) {
                    val versionInfo = "–≤–µ—Ä—Å–∏—è ${com.example.calculatorapp.models.SupabasePriceManager.getCurrentVersion()}"
                    val isOnline = priceManager.isOnlineMode()

                    Logger.d("MainActivity", "‚úÖ Initialization success:")
                    Logger.d("MainActivity", "   üìä Online mode: $isOnline")
                    Logger.d("MainActivity", "   üìã Data version: ${com.example.calculatorapp.models.SupabasePriceManager.getCurrentVersion()}")
                    Logger.d("MainActivity", "   üîß Mode string: ${priceManager.getModeString()}")

                    // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
                    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    val testPrice = priceManager.getPrice(com.example.calculatorapp.models.CoverageType.COLOR_RED_GREEN, "10")
                    Logger.d("MainActivity", "üß™ Test price: –ö—Ä–∞—Å–Ω—ã–π/–∑–µ–ª–µ–Ω—ã–π 10–º–º = ${testPrice}‚ÇΩ")

                    if (testPrice > 0 && testPrice != 1650.0) {
                        Logger.d("MainActivity", "‚úÖ SUCCESS: Using Supabase prices!")
                        Toast.makeText(
                            this@MainActivity,
                            "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞–∫—É —É—Å–ø–µ—à–Ω–æ - ${priceManager.getModeString()} ($versionInfo)",
                            Toast.LENGTH_SHORT
                        ).show()
                    } else {
                        Logger.w("MainActivity", "‚ö†Ô∏è WARNING: Still using default prices!")
                        Toast.makeText(
                            this@MainActivity,
                            "‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –æ–±–ª–∞–∫—É, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã ($versionInfo)",
                            Toast.LENGTH_SHORT
                        ).show()
                    }

                    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    hideLoadingScreen()
                    showFragment(CalculatorFragment())
                    setActiveButton(calculatorButton)
                } else {
                    throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
                }
            } catch (e: Exception) {
                Logger.e("MainActivity", "‚ùå Initialization failed: ${e.message}", e)

                // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
                Logger.d("MainActivity", "üîÑ Falling back to local mode...")
                priceManager.initializeLocalMode()

                hideLoadingScreen()
                showFragment(CalculatorFragment())
                setActiveButton(calculatorButton)

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                Toast.makeText(
                    this@MainActivity,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫—É - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }

    private fun createUI() {
        // –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - FrameLayout –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        val mainContainer = android.widget.FrameLayout(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT
            )
            setBackgroundColor(ThemeHelper.Colors.getBackgroundColor(this@MainActivity))
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π layout —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        val mainLayout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            layoutParams = android.widget.FrameLayout.LayoutParams(
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT,
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT
            )
        }

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        fragmentContainer = LinearLayout(this).apply {
            id = View.generateViewId()
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                0,
                1f
            )
        }

        // –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–Ω–∏–∑—É
        val navigationPanel = createNavigationPanel()

        mainLayout.addView(fragmentContainer)
        mainLayout.addView(navigationPanel)

        // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout)
        loadingScreen = createLoadingScreen()

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        mainContainer.addView(mainLayout)
        mainContainer.addView(loadingScreen)

        setContentView(mainContainer)
    }

    private fun createLoadingScreen(): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            layoutParams = android.widget.FrameLayout.LayoutParams(
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT,
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT
            )
            setBackgroundColor(ThemeHelper.Colors.getBackgroundColor(this@MainActivity))
            gravity = android.view.Gravity.CENTER
            visibility = View.GONE
            elevation = 10f // –ü–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

            // –õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            val logoText = android.widget.TextView(this@MainActivity).apply {
                text = "üìä"
                textSize = 48f
                gravity = android.view.Gravity.CENTER
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 24
                }
            }

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            val titleText = android.widget.TextView(this@MainActivity).apply {
                text = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏–π"
                textSize = 24f
                setTextColor(ThemeHelper.Colors.getTextPrimaryColor(this@MainActivity))
                gravity = android.view.Gravity.CENTER
                typeface = android.graphics.Typeface.DEFAULT_BOLD
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 8
                }
            }

            // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            val subtitleText = android.widget.TextView(this@MainActivity).apply {
                text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞–∫—É..."
                textSize = 16f
                setTextColor(ThemeHelper.Colors.getTextSecondaryColor(this@MainActivity))
                gravity = android.view.Gravity.CENTER
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 32
                }
            }

            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            val progressBar = android.widget.ProgressBar(this@MainActivity).apply {
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 16
                }
                isIndeterminate = true
            }

            // –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç
            val statusText = android.widget.TextView(this@MainActivity).apply {
                text = "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase..."
                textSize = 14f
                setTextColor(ThemeHelper.Colors.getTextSecondaryColor(this@MainActivity))
                gravity = android.view.Gravity.CENTER
            }

            addView(logoText)
            addView(titleText)
            addView(subtitleText)
            addView(progressBar)
            addView(statusText)
        }
    }

    private fun showLoadingScreen() {
        loadingScreen.visibility = View.VISIBLE
        // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º fragmentContainer, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π
    }

    private fun hideLoadingScreen() {
        loadingScreen.visibility = View.GONE
        // fragmentContainer –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private fun isNetworkAvailable(): Boolean {
        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val network = connectivityManager.activeNetwork ?: return false
        val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false

        return capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)
    }

    private fun refreshDataAndShowCalculator() {
        lifecycleScope.launch {
            try {
                // –ö–†–ò–¢–ò–ß–ù–û: –°–ù–ê–ß–ê–õ–ê —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                showFragment(CalculatorFragment())

                // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
                if (!priceManager.isOnlineMode() && isNetworkAvailable()) {
                    showMiniLoadingScreen("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞–∫—É...")

                    hideMiniLoadingScreen()

                    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
                }

                if (priceManager.isOnlineMode()) {
                    if (!isNetworkAvailable()) {
                        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    } else {
                        showMiniLoadingScreen("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

                        hideMiniLoadingScreen()

                        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    }
                }
            } catch (e: Exception) {
                hideMiniLoadingScreen()
                Toast.makeText(
                    this@MainActivity,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }

    private lateinit var miniLoadingScreen: LinearLayout

    private fun createMiniLoadingScreen(): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            layoutParams = android.widget.FrameLayout.LayoutParams(
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT,
                android.widget.FrameLayout.LayoutParams.MATCH_PARENT
            )
            setBackgroundColor(ThemeHelper.Colors.getBackgroundColor(this@MainActivity))
            gravity = android.view.Gravity.CENTER
            visibility = View.GONE
            elevation = 10f // –ü–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

            // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            val logoText = android.widget.TextView(this@MainActivity).apply {
                text = "üîÑ"
                textSize = 32f
                gravity = android.view.Gravity.CENTER
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 16
                }
            }

            val titleText = android.widget.TextView(this@MainActivity).apply {
                text = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
                textSize = 16f
                setTextColor(ThemeHelper.Colors.getTextPrimaryColor(this@MainActivity))
                gravity = android.view.Gravity.CENTER
                typeface = android.graphics.Typeface.DEFAULT_BOLD
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    bottomMargin = 16
                }
            }

            val progressBar = android.widget.ProgressBar(this@MainActivity).apply {
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                isIndeterminate = true
            }

            addView(logoText)
            addView(titleText)
            addView(progressBar)
        }
    }

    private fun showMiniLoadingScreen(message: String = "–ó–∞–≥—Ä—É–∑–∫–∞...") {
        if (!::miniLoadingScreen.isInitialized) {
            miniLoadingScreen = createMiniLoadingScreen()
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (FrameLayout)
            val mainContainer = findViewById<android.widget.FrameLayout>(android.R.id.content).getChildAt(0) as android.widget.FrameLayout
            mainContainer.addView(miniLoadingScreen)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        val titleText = (miniLoadingScreen.getChildAt(1) as android.widget.TextView)
        titleText.text = message

        miniLoadingScreen.visibility = View.VISIBLE
    }

    private fun hideMiniLoadingScreen() {
        if (::miniLoadingScreen.isInitialized) {
            miniLoadingScreen.visibility = View.GONE
        }
    }

    private fun createNavigationPanel(): LinearLayout {
        val panel = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            setBackgroundColor(ThemeHelper.Colors.getSurfaceColor(this@MainActivity))
            setPadding(16, 16, 16, 16)
            elevation = 8f

            // –î–æ–±–∞–≤–∏–º —Ç–µ–Ω—å —Å–≤–µ—Ä—Ö—É
            background = GradientDrawable().apply {
                setColor(ThemeHelper.Colors.getSurfaceColor(this@MainActivity))
                setStroke(1, ThemeHelper.Colors.getCardStrokeColor(this@MainActivity))
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculatorButton = Button(this).apply {
            id = View.generateViewId()
            text = "üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
            textSize = 14f
            typeface = android.graphics.Typeface.DEFAULT_BOLD
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            ).apply {
                marginEnd = 8
            }
            setPadding(0, 12, 0, 12)

            setOnClickListener {
                // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                setActiveButton(this)

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                refreshDataAndShowCalculator()
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –ê–¥–º–∏–Ω
        adminButton = Button(this).apply {
            id = View.generateViewId()
            text = "‚öôÔ∏è –ê–¥–º–∏–Ω"
            textSize = 14f
            typeface = android.graphics.Typeface.DEFAULT_BOLD
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            ).apply {
                marginStart = 8
            }
            setPadding(0, 12, 0, 12)

            setOnClickListener {
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
                lifecycleScope.launch {
                    if (!priceManager.isOnlineMode() && isNetworkAvailable()) {
                        Logger.d("MainActivity", "üåê Trying to upgrade to online mode for admin...")
                        showMiniLoadingScreen("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞–∫—É...")

                        hideMiniLoadingScreen()

                        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                    }

                    // –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞
                    showFragment(AdminFragment())
                    setActiveButton(adminButton)
                }
            }
        }

        panel.addView(calculatorButton)
        panel.addView(adminButton)

        return panel
    }

    private fun setupNavigation() {
        setInactiveButton(calculatorButton)
        setInactiveButton(adminButton)
    }

    private fun showFragment(fragment: Fragment) {
        supportFragmentManager.beginTransaction()
            .replace(fragmentContainer.id, fragment)
            .commit()
    }

    private fun setActiveButton(button: Button) {
        // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        setInactiveButton(calculatorButton)
        setInactiveButton(adminButton)

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        button.apply {
            setTextColor("#FFFFFF".toColorInt())
            background = createActiveButtonBackground()
        }
    }

    private fun setInactiveButton(button: Button) {
        button.apply {
            setTextColor(ThemeHelper.Colors.getButtonInactiveTextColor(this@MainActivity))
            background = createInactiveButtonBackground()
        }
    }

    private fun createActiveButtonBackground(): GradientDrawable {
        return GradientDrawable().apply {
            shape = GradientDrawable.RECTANGLE
            setColor("#10B981".toColorInt())
            cornerRadius = 8f
        }
    }

    private fun createInactiveButtonBackground(): GradientDrawable {
        return GradientDrawable().apply {
            shape = GradientDrawable.RECTANGLE
            setColor(ThemeHelper.Colors.getButtonInactiveBackgroundColor(this@MainActivity))
            cornerRadius = 8f
            setStroke(1, ThemeHelper.Colors.getButtonInactiveStrokeColor(this@MainActivity))
        }
    }
}
